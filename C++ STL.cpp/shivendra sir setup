How to setup Appium via npm
1.	Install Java and setup Environment variables
2.	Install Sdk and setup Environment variables
3.	Install Appium

Step-1 Download and install Node.js
4.	 Open node.js website using this link - (https://nodejs.org/).
5.	Download latest version of NodeJS (Recommended for Most Users).
6.	Install it and wait for complete installation.
7.	To verify that installation is successful (Start->search Node.js and Node.js command prompt).

Step-2 Install Appium using Node.JS

8.	Open Node.JS Command prompt from start menu of windows.
9.	In Node.js command prompt type this command (npm install –g appium) and hit Enter.
10.	Once you hit Enter you will see that Node will start installing Appium (you might have to wait for few seconds to see the actual installation happening).
11.	Once installation complete you will see that cmd prompt screen as soon in below screenshot:
 

12.	To check the Appium has been installed, run this command- appium –v on cmd prompt.
13.	Set Environment Variables for appium like:
APPIUM_LIB_PATH=C:\ProgramFiles(x86)\Appium\resources\app\node_modules\appium\build\lib
NODEJS_PATH= C:\Program Files\nodejs
14.	Download Eclipse and start scripting
     		    


import bot from './assets/bot.svg'
import user from './assets/user.svg'

const form = document.querySelector('form')
const chatContainer = document.querySelector('#chat_container')

let loadInterval

function loader(element) {
    element.textContent = ''

    loadInterval = setInterval(() => {
        // Update the text content of the loading indicator
        element.textContent += '.';

        // If the loading indicator has reached three dots, reset it
        if (element.textContent === '....') {
            element.textContent = '';
        }
    }, 300);
}
function typeText(element, text) {
  let index = 0

  let interval = setInterval(() => {
      if (index < text.length) {
          element.innerHTML += text.charAt(index)
          index++
      } else {
          clearInterval(interval)
      }
  }, 20)
}
// generate unique ID for each message div of bot
// necessary for typing text effect for that specific reply
// without unique ID, typing text will work on every element
function generateUniqueId() {
  const timestamp = Date.now();
  const randomNumber = Math.random();
  const hexadecimalString = randomNumber.toString(16);

  return `id-${timestamp}-${hexadecimalString}`;
}

function chatStripe(isAi, value, uniqueId) {
  return (
      `
      <div class="wrapper ${isAi && 'ai'}">
          <div class="chat">
              <div class="profile">
                  <img 
                    src=${isAi ? bot : user} 
                    alt="${isAi ? 'bot' : 'user'}" 
                  />
              </div>
              <div class="message" id=${uniqueId}>${value}</div>
          </div>
      </div>
  `
  )
}

const handleSubmit = async (e) => {
  e.preventDefault()

  const data = new FormData(form)

  // user's chatstripe
  chatContainer.innerHTML += chatStripe(false, data.get('prompt'))

  // to clear the textarea input 
  form.reset()

  // bot's chatstripe
  const uniqueId = generateUniqueId()
  chatContainer.innerHTML += chatStripe(true, " ", uniqueId)

  // to focus scroll to the bottom 
  chatContainer.scrollTop = chatContainer.scrollHeight;

  // specific message div 
  const messageDiv = document.getElementById(uniqueId)

  // messageDiv.innerHTML = "..."
  loader(messageDiv)
}
form.addEventListener('submit', handleSubmit)
form.addEventListener('keyup', (e) => {
    if (e.keyCode === 13) {
        handleSubmit(e)
    }
})

