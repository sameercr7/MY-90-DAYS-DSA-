import sys
from PyQt5.QtCore import QUrl
# used for widget.
# It can be used to display web pages, as well as to provide an interface for web browser applications.
from PyQt5.QtWebEngineWidgets import QWebEngineView
#  The QApplication class is used to create an application object which is needed to run a GUI application. The other classes are used to create various widgets such as line edits, push buttons and layouts which can be used to arrange the widgets in a GUI window.
from PyQt5.QtWidgets import QApplication, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QWidget
# This code creates a class called Browser that is a subclass of the QWidget class. The QWidget class is used to create user interfaces in the Qt library, which is a framework for creating graphical user interfaces (GUIs). The Browser class will inherit all of the properties and methods from the QWidget class, allowing it to create its own GUI.
class Browser(QWidget):
    #  The constructor method is called when an object of the class is created and it is used to initialize the attributes of the object. In this case, the constructor method does not have any parameters, so it does not do anything.
    def _init_(self):
        # This code calls the init method of the parent class. The init method is used to initialize an object's state
        super()._init_()
        # This code creates a QWebEngineView object and assigns it to the instance variable web_view. The QWebEngineView class provides a widget that is used to view and edit web documents. It is part of the Qt library, which is a cross-platform application framework used for developing GUI applications.
        self.web_view = QWebEngineView()
        # A QLineEdit is a widget that allows the user to enter and edit a single line of text.
        self.line_edit = QLineEdit()
        # This code creates a QPushButton widget with the text "Back" and assigns it to the instance variable self.back_button. The button can then be used to navigate back to a previous page or view in an application.

        self.back_button = QPushButton("Back")
        # This code creates a QPushButton object with the text "Forward" and assigns it to the attribute self.forward_button. The button can be used to perform an action when clicked.
        self.forward_button = QPushButton("Forward")
        # This method is likely responsible for setting up the user interface for the program, such as creating windows, buttons, and other elements.
        self.init_ui()
# could be used to set up the initial layout of a window or page, such as setting the size, position, and other properties of elements on the page.
    def init_ui(self):
        # code creates a horizontal box layout object in the Qt library. A QHBoxLayout is a type of layout that arranges widgets horizontally from left to right
        h_layout = QHBoxLayout() 
        h_layout.addWidget(self.back_button)
        h_layout.addWidget(self.forward_button)
# A line edit widget is a single-line text editor that allows the user to enter and edit text.
        h_layout.addWidget(self.line_edit)

        v_layout = QVBoxLayout()
        v_layout.addLayout(h_layout)
        v_layout.addWidget(self.web_view)

        self.setLayout(v_layout)
# This code connects the backbutton to the webview.back function, so that when the backbutton is clicked, the webview will go back one page.
        self.back_button.clicked.connect(self.web_view.back)
        self.forward_button.clicked.connect(self.web_view.forward)
        self.line_edit.returnPressed.connect(self.load_url)

        self.show()
# generally it is used to load a URL from a web page or other source.
    def load_url(self):
        # The QUrl object is used to represent a URL in Qt applications.
        url = QUrl(self.line_edit.text())
        # This code loads a given URL into a web view. The web view is an object of the class that contains this code, and the URL is passed as an argument.
        self.web_view.load(url)

if __name__ == '__main__':
    # This code creates an instance of the QApplication class. The QApplication class manages the GUI application
    app = QApplication(sys.argv)
    # This code creates a new instance of the Browser class. This class is used to create a web browser object that can be used to interact with websites and webpages. The browser object can be used to open webpages, navigate between pages, and interact with elements on the page.
    browser = Browser()
    # This code terminates the application. The sys.exit() function exits the application, and app.exec_() is a function that runs the main loop of the application. Together, they terminate the application.
    sys.exit(app.exec_())


import bot from './assets/bot.svg'
import user from './assets/user.svg'

const form = document.querySelector('form')
const chatContainer = document.querySelector('#chat_container')

let loadInterval

function loader(element) {
    element.textContent = ''

    loadInterval = setInterval(() => {
        // Update the text content of the loading indicator
        element.textContent += '.';

        // If the loading indicator has reached three dots, reset it
        if (element.textContent === '....') {
            element.textContent = '';
        }
    }, 300);
}
function typeText(element, text) {
  let index = 0

  let interval = setInterval(() => {
      if (index < text.length) {
          element.innerHTML += text.charAt(index)
          index++
      } else {
          clearInterval(interval)
      }
  }, 20)
}
// generate unique ID for each message div of bot
// necessary for typing text effect for that specific reply
// without unique ID, typing text will work on every element
function generateUniqueId() {
  const timestamp = Date.now();
  const randomNumber = Math.random();
  const hexadecimalString = randomNumber.toString(16);

  return `id-${timestamp}-${hexadecimalString}`;
}

function chatStripe(isAi, value, uniqueId) {
  return (
      `
      <div class="wrapper ${isAi && 'ai'}">
          <div class="chat">
              <div class="profile">
                  <img 
                    src=${isAi ? bot : user} 
                    alt="${isAi ? 'bot' : 'user'}" 
                  />
              </div>
              <div class="message" id=${uniqueId}>${value}</div>
          </div>
      </div>
  `
  )
}

const handleSubmit = async (e) => {
  e.preventDefault()

  const data = new FormData(form)

  // user's chatstripe
  chatContainer.innerHTML += chatStripe(false, data.get('prompt'))

  // to clear the textarea input 
  form.reset()

  // bot's chatstripe
  const uniqueId = generateUniqueId()
  chatContainer.innerHTML += chatStripe(true, " ", uniqueId)

  // to focus scroll to the bottom 
  chatContainer.scrollTop = chatContainer.scrollHeight;

  // specific message div 
  const messageDiv = document.getElementById(uniqueId)

  // messageDiv.innerHTML = "..."
  loader(messageDiv)
}
form.addEventListener('submit', handleSubmit)
form.addEventListener('keyup', (e) => {
    if (e.keyCode === 13) {
        handleSubmit(e)
    }
})




import sys
from PyQt5.QtCore import QUrl
# used for widget.
# It can be used to display web pages, as well as to provide an interface for web browser applications.
from PyQt5.QtWebEngineWidgets import QWebEngineView
#  The QApplication class is used to create an application object which is needed to run a GUI application. The other classes are used to create various widgets such as line edits, push buttons and layouts which can be used to arrange the widgets in a GUI window.
from PyQt5.QtWidgets import QApplication, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QWidget
# This code creates a class called Browser that is a subclass of the QWidget class. The QWidget class is used to create user interfaces in the Qt library, which is a framework for creating graphical user interfaces (GUIs). The Browser class will inherit all of the properties and methods from the QWidget class, allowing it to create its own GUI.
class Browser(QWidget):
    #  The constructor method is called when an object of the class is created and it is used to initialize the attributes of the object. In this case, the constructor method does not have any parameters, so it does not do anything.
    def _init_(self):
        # This code calls the init method of the parent class. The init method is used to initialize an object's state
        super()._init_()
        # This code creates a QWebEngineView object and assigns it to the instance variable web_view. The QWebEngineView class provides a widget that is used to view and edit web documents. It is part of the Qt library, which is a cross-platform application framework used for developing GUI applications.
        self.web_view = QWebEngineView()
        # A QLineEdit is a widget that allows the user to enter and edit a single line of text.
        self.line_edit = QLineEdit()
        # This code creates a QPushButton widget with the text "Back" and assigns it to the instance variable self.back_button. The button can then be used to navigate back to a previous page or view in an application.

        self.back_button = QPushButton("Back")
        # This code creates a QPushButton object with the text "Forward" and assigns it to the attribute self.forward_button. The button can be used to perform an action when clicked.
        self.forward_button = QPushButton("Forward")
        # This method is likely responsible for setting up the user interface for the program, such as creating windows, buttons, and other elements.
        self.init_ui()

    def init_ui(self):
        h_layout = QHBoxLayout()
        h_layout.addWidget(self.back_button)
        h_layout.addWidget(self.forward_button)
        h_layout.addWidget(self.line_edit)

        v_layout = QVBoxLayout()
        v_layout.addLayout(h_layout)
        v_layout.addWidget(self.web_view)

        self.setLayout(v_layout)

        self.back_button.clicked.connect(self.web_view.back)
        self.forward_button.clicked.connect(self.web_view.forward)
        self.line_edit.returnPressed.connect(self.load_url)

        self.show()

    def load_url(self):
        url = QUrl(self.line_edit.text())
        self.web_view.load(url)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    browser = Browser()
    sys.exit(app.exec_())
wdd
